#!/bin/bash
RED="\e[31m"
GREEN="\e[32m"
GRAY="\e[90m"
BOLDRED="\e[1;31m"
BOLDGREEN="\e[1;32m"
BOLDGRAY="\e[1;90m"
ENDCOLOR="\e[0m"

function exit_code_prompt() {
  local LAST_EXIT_CODE=$?
  if [[ $LAST_EXIT_CODE -eq 0 ]]; then
    EXIT_CODE_PROMPT="${BOLDGREEN}-->${ENDCOLOR}"
  else
    EXIT_CODE_PROMPT="${BOLDRED}:$LAST_EXIT_CODE->${ENDCOLOR}"
  fi
  echo "$EXIT_CODE_PROMPT"
}

function _prompt() {
	PS1="${BOLDGRAY}\u@\h${ENDCOLOR}$(exit_code_prompt) "
	printf -v PS1RHS "${GRAY}$(pwd) $(vcprompt -f "[%n:%b%m]")${ENDCOLOR} [%(%H:%M:%S)T]" -1 # -1 is current time

	# Strip ANSI commands before counting length
	# From: https://www.commandlinefu.com/commands/view/12043/remove-color-special-escape-ansi-codes-from-text-with-sed
	PS1RHS_stripped=$(sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" <<<"$PS1RHS")
	# Reference: https://en.wikipedia.org/wiki/ANSI_escape_code
	local save='\e[s' # Save cursor position
	local rest='\e[u' # Restore cursor to save point

	# Save cursor position, jump to right hand edge, then go left N columns where
	# N is the length of the printable RHS string. Print the RHS string, then
	# return to the saved position and print the LHS prompt.

	# Note: "\[" and "\]" are used so that bash can calculate the number of
	# printed characters so that the prompt doesn't do strange things when
	# editing the entered text.
	export PS1="\[${save}\e[${COLUMNS:-$(tput cols)}C\e[${#PS1RHS_stripped}D${PS1RHS}${rest}\]${PS1}"
}

