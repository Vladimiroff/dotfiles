#!/bin/bash
# shellcheck disable=2001

# Colors: \e[Xm | bold: \e[1:Xm | end: \e[0m
# red: 31 | green: 32 | blue: 34 | cyan: 36

function exit_code_prompt() {
	local LAST_EXIT_CODE=$?
	local SIGN='>'
	if [ $EUID -eq 0 ]; then
		SIGN='$'
	fi
	if [[ $LAST_EXIT_CODE -eq 0 ]]; then
		EXIT_CODE_PROMPT="\[\e[1;32m\]--$SIGN\[\e[0m\]"
	else
		EXIT_CODE_PROMPT=":\[\e[1;31m\]$LAST_EXIT_CODE-$SIGN\[\e[0m\]"
	fi
	echo "$EXIT_CODE_PROMPT"
}

function _prompt() {
	exit_code=$(exit_code_prompt)
	PS1="\[\e[1;34m\]\u@\h$exit_code "
	printf -v PS1RHS "\e[1;34m$(pwd) \e[1;36m$(vcprompt -f "(%n:%b%m)")\e[0m [%(%H:%M:%S)T]" -1 # -1 is current time

	# Strip ANSI commands before counting length
	# From: https://www.commandlinefu.com/commands/view/12043/remove-color-special-escape-ansi-codes-from-text-with-sed
	PS1RHS_stripped=$(sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" <<<"$PS1RHS")
	# Reference: https://en.wikipedia.org/wiki/ANSI_escape_code
	local save='\e[s' # Save cursor position
	local rest='\e[u' # Restore cursor to save point

	# Save cursor position, jump to right hand edge, then go left N columns where
	# N is the length of the printable RHS string. Print the RHS string, then
	# return to the saved position and print the LHS prompt.

	# Note: "\[" and "\]" are used so that bash can calculate the number of
	# printed characters so that the prompt doesn't do strange things when
	# editing the entered text.
	export PS1="\[${save}\e[${COLUMNS:-$(tput cols)}C\e[${#PS1RHS_stripped}D${PS1RHS}${rest}\]${PS1}"
}


source "${DOTFILES}/sh/funcs"
